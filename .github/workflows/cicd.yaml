name: Auth Service CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: fiap-x-dev
  NAMESPACE: fiap-x-dev

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass_123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run tests
      env:
        DATABASE_URL: postgresql://test_user:test_pass_123@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-jwt-secret-key-for-testing-only-minimum-32-chars
        APP_ENVIRONMENT: testing
      run: |
        pytest test/ -v --cov --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: auth-service
        name: auth-service-coverage

  sonarqube:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name fiap-x-dev --region us-east-1

    - name: Get SonarQube URL
      run: |
        # Verificar se SonarQube está rodando no EKS
        if kubectl get svc -n sonarqube sonarqube 2>/dev/null; then
          # Port forward para acessar SonarQube
          kubectl port-forward svc/sonarqube 9000:9000 -n sonarqube &
          sleep 10
          echo "SONAR_HOST_URL=http://localhost:9000" >> $GITHUB_ENV
        else
          echo "SonarQube service not found, skipping scan"
          echo "SONAR_HOST_URL=" >> $GITHUB_ENV
        fi

    - name: SonarQube Scan
      if: env.SONAR_TOKEN != '' && env.SONAR_HOST_URL != ''
      uses: SonarSource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=fiap-x-auth-service
          -Dsonar.projectName="FIAP X Auth Service"
          -Dsonar.projectVersion=1.0
          -Dsonar.sources=.
          -Dsonar.exclusions=**/*_test.py,**/test/**,**/test_*,**/__pycache__/**,**/venv/**,**/.venv/**,**/migrations/**,**/static/**,**/templates/**
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.sourceEncoding=UTF-8
          -Dsonar.python.version=3.11

    - name: Stop port-forward
      if: always()
      run: pkill -f "kubectl port-forward" || true

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, sonarqube]
    if: github.ref == 'refs/heads/main' && (needs.sonarqube.result == 'success' || needs.sonarqube.result == 'skipped')
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build e tag com SHA
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Tag também como latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push ambas as tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout infrastructure repo
      uses: actions/checkout@v4
      with:
        repository: ${{ secrets.INFRA_REPO_NAME }}
        token: ${{ secrets.INFRA_REPO_TOKEN }}
        path: infrastructure

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Get Secret ARNs
      run: |
        echo "AUTH_DB_SECRET_ARN=$(aws secretsmanager describe-secret --secret-id fiap-x-dev-auth-db-credentials --query 'ARN' --output text)" >> $GITHUB_ENV
        echo "JWT_SECRET_ARN=$(aws secretsmanager describe-secret --secret-id fiap-x-dev-jwt-secret --query 'ARN' --output text)" >> $GITHUB_ENV
        echo "REDIS_SECRET_ARN=$(aws secretsmanager describe-secret --secret-id fiap-x-dev-redis-secret --query 'ARN' --output text)" >> $GITHUB_ENV

    - name: Deploy to EKS
      env:
        IMAGE_URI: "720049726178.dkr.ecr.us-east-1.amazonaws.com/fiap-x-auth-service:latest"
      run: |
        cd infrastructure
        echo "Deploying with image: $IMAGE_URI"
        echo "AUTH_DB_SECRET_ARN: $AUTH_DB_SECRET_ARN"
        echo "JWT_SECRET_ARN: $JWT_SECRET_ARN"
        echo "REDIS_SECRET_ARN: $REDIS_SECRET_ARN"
        
        # Debug: mostrar antes da substituição
        echo "=== Before envsubst ==="
        grep -A 5 -B 5 "image:" k8s/auth-service/deployment.yaml
        
        # Aplicar substituições e mostrar resultado
        echo "=== After envsubst ==="
        envsubst < k8s/auth-service/deployment.yaml | grep -A 5 -B 5 "image:"
        
        # Aplicar no cluster
        envsubst < k8s/auth-service/deployment.yaml | kubectl apply -f -
        kubectl rollout status deployment/auth-service -n $NAMESPACE --timeout=300s
        kubectl get pods -n $NAMESPACE -l app=auth-service

    - name: Run smoke tests
      run: |
        kubectl port-forward svc/auth-service 8080:8000 -n $NAMESPACE &
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        pkill -f "kubectl port-forward"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    steps:
    - name: Notify Slack
      if: env.SLACK_WEBHOOK != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}