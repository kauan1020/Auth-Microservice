version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: fiap_x_auth_postgres
    environment:
      POSTGRES_DB: fiap_x_auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - fiap_x_shared_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fiap_x_auth && psql -U postgres -d fiap_x_auth -c 'SELECT 1'"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 60s
    command: >
      postgres -c 'max_connections=200'
               -c 'shared_buffers=256MB'
               -c 'effective_cache_size=1GB'
               -c 'maintenance_work_mem=64MB'
               -c 'checkpoint_completion_target=0.9'
               -c 'wal_buffers=16MB'
               -c 'default_statistics_target=100'
               -c 'random_page_cost=1.1'
               -c 'effective_io_concurrency=200'

  redis:
    image: redis:7-alpine
    container_name: fiap_x_auth_redis
    command: redis-server --appendonly yes --requirepass redis123 --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - fiap_x_shared_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s

  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fiap_x_auth_migrations
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/fiap_x_auth
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fiap_x_auth
      DB_USER: postgres
      DB_PASSWORD: postgres123
      PYTHONPATH: /app
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        until pg_isready -h postgres -p 5432 -U postgres; do
          echo 'Database not ready, waiting 2 seconds...'
          sleep 2
        done &&
        echo 'Database is ready, running migrations...' &&
        alembic upgrade head &&
        echo 'Migrations completed successfully'
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fiap_x_shared_network
    volumes:
      - ./migrations:/app/migrations
      - ./alembic.ini:/app/alembic.ini
    restart: "no"

  auth_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fiap_x_auth_service
    environment:
      APP_NAME: "FIAP X Authentication Service"
      APP_VERSION: "1.0.0"
      APP_DEBUG: "false"
      APP_HOST: "0.0.0.0"
      APP_PORT: "8000"
      APP_ENVIRONMENT: "development"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fiap_x_auth
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_POOL_SIZE: 20
      DB_MAX_OVERFLOW: 30
      DB_ECHO: "false"
      DB_POOL_PRE_PING: "true"
      DB_POOL_RECYCLE: 3600
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      REDIS_DB: 0
      JWT_SECRET_KEY: "your-super-secret-jwt-key-minimum-32-characters-long"
      JWT_ALGORITHM: "HS256"
      JWT_ISSUER: "fiap-x-auth"
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 15
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: 30
      SECURITY_BCRYPT_ROUNDS: 12
      SECURITY_CHECK_COMPROMISED_PASSWORDS: "true"
      SECURITY_RATE_LIMIT_REQUESTS: 100
      SECURITY_CORS_ORIGINS: '["*"]'
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - fiap_x_shared_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database connection...' &&
        until pg_isready -h postgres -p 5432 -U postgres; do
          echo 'Database not ready, waiting 3 seconds...'
          sleep 3
        done &&
        echo 'Testing database connection...' &&
        until PGPASSWORD=postgres123 psql -h postgres -U postgres -d fiap_x_auth -c 'SELECT 1' > /dev/null 2>&1; do
          echo 'Database connection failed, waiting 3 seconds...'
          sleep 3
        done &&
        echo 'Database connection successful, starting application...' &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --log-level info
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  fiap_x_shared_network:
    driver: bridge
    name: fiap_x_shared_network
    external: true