version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: fiap_x_auth_postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - fiap_x_shared_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 60s
    command: >
      postgres -c 'max_connections=200'
               -c 'shared_buffers=256MB'
               -c 'effective_cache_size=1GB'
               -c 'maintenance_work_mem=64MB'
               -c 'checkpoint_completion_target=0.9'
               -c 'wal_buffers=16MB'
               -c 'default_statistics_target=100'
               -c 'random_page_cost=1.1'
               -c 'effective_io_concurrency=200'

  redis:
    image: redis:7-alpine
    container_name: fiap_x_auth_redis
    env_file:
      - .env
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - fiap_x_shared_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s

  db_setup:
    image: postgres:15-alpine
    container_name: fiap_x_auth_db_setup
    env_file:
      - .env
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...'
        until pg_isready -h postgres -p 5432 -U ${DB_USER}; do
          echo 'Waiting for postgres...'
          sleep 2
        done
        echo 'PostgreSQL is ready!'
        
        echo 'Creating database if it does not exist...'
        psql -h postgres -U ${DB_USER} -d postgres -tc \"SELECT 1 FROM pg_database WHERE datname = '${DB_NAME}'\" | grep -q 1 || psql -h postgres -U ${DB_USER} -d postgres -c \"CREATE DATABASE ${DB_NAME};\"
        
        echo 'Database setup complete!'
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fiap_x_shared_network
    restart: "no"

  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fiap_x_auth_migrations
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      PYTHONPATH: /app
    command: ["sh", "-c", "sleep 5 && alembic upgrade head"]
    depends_on:
      db_setup:
        condition: service_completed_successfully
    networks:
      - fiap_x_shared_network
    volumes:
      - ./migrations:/app/migrations
      - ./alembic.ini:/app/alembic.ini
    restart: "no"

  auth_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fiap_x_auth_service
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
    ports:
      - "${APP_PORT}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - fiap_x_shared_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--log-level", "info"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  fiap_x_shared_network:
    driver: bridge
    name: fiap_x_shared_network
    external: true